services:
  psql:
    container_name: yt-psql
    image: postgres:17
    restart: always
    env_file:
      - ./.env
    ports:
      - "5555:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./psql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  psql-test:
    container_name: yt-psql-test
    image: postgres:17
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    ports:
      - "5678:5432"
    volumes:
      - ./psql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test_user" ]
      interval: 5s
      timeout: 5s
      retries: 5

  test:
    container_name: yt-unittests
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      psql-test:
        condition: service_healthy
    environment:
      POSTGRES_HOST: psql-test
      POSTGRES_PORT: 5432
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    command: >
      sh -c "
        PGPASSWORD=test_password psql -h psql-test -U test_user -d test_db -f psql/schema.sql &&
        python -m pytest
      "

  scrape:
    container_name: yt-scrape
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./scripts/data/Dockerfile
    depends_on:
      psql:
        condition: service_healthy

volumes:
  db_data:
